#ifdef SWIGR
    %module rbsg
#endif

#ifdef SWIGPYTHON
    %module pybsg
#endif

%ignore Backbone;
%ignore PairedReadLinker;
%{
/* Includes the header in the wrapper code */
#include <cstdint>
#include <sstream>
#include "sglib/types/KmerTypes.hpp"
#include "sglib/types/GenericTypes.hpp"
#include "sglib/types/MappingTypes.hpp"
#include "sglib/graph/SequenceGraphPath.hpp"
#include "sglib/graph/SequenceSubGraph.hpp"
#include "sglib/graph/SequenceGraph.hpp"
#include "sglib/readers/SequenceGraphReader.hpp"
#include "sglib/processors/KmerCompressionIndex.hpp"
#include "sglib/workspace/WorkSpace.hpp"
#include "sglib/factories/KMerFactory.hpp"
#include "sglib/factories/KMerCountFactory.hpp"

#include "sglib/indexers/UniqueKmerIndex.hpp"
#include "sglib/mappers/LinkedReadMapper.hpp"
#include "sglib/mappers/LongReadMapper.hpp"
#include "sglib/datastores/LongReadsDatastore.hpp"
#include "sglib/mappers/PairedReadMapper.hpp"
#include "sglib/datastores/PairedReadsDatastore.hpp"
#include "sglib/datastores/PathsDatastore.hpp"

#include "sglib/mappers/threader/NodeMapper.hpp"
#include "sglib/mappers/threader/MappingThreader.hpp"

#include "sglib/processors/Untangler.hpp"
#include "sglib/graph/LinkageDiGraph.hpp"
#include "sglib/processors/LinkageUntangler.hpp"

#include "sglib/processors/HaplotypeConsensus.hpp"
#include "sglib/readers/FileReader.hpp"
%}

#define MADE_DOCS "@DOXYGEN_FOUND@"
#ifdef SWIGPYTHON
    #if MADE_DOCS=="YES"
        %include "python_docs.i"
    #endif
#endif

%include "stl.i"
%include "std_common.i"
%include "std_container.i"
%include "stdint.i"
%include "std_set.i"
%include "std_unordered_set.i"
%include "exception.i"

%exception {
  try {
    $action
  } catch (const std::exception& e) {
    SWIG_exception(SWIG_RuntimeError, e.what());
  }
}
%include "sglib/types/KmerTypes.hpp"
%include "sglib/types/GenericTypes.hpp"
%include "sglib/datastores/LinkedReadsDatastore.hpp"
%include "sglib/readers/FileReader.hpp"

   %template(vectorInt) std::vector<int>;
   %template(vectorDouble) std::vector<double>;
   %template(vectorFloat) std::vector<float>;
   %template(vectorString) std::vector<std::string>;
   %template(vectorLink) std::vector<Link>;
   %template(vectorvectorLink) std::vector<std::vector<Link>>;
   %template(vectorSGNode) std::vector<sgNodeID_t>;
   %template(vectorvectorSGNode) std::vector<std::vector<sgNodeID_t>>;
   %template(vectorNode) std::vector<Node>;
   %template(vectorNodeVisitor) std::vector<nodeVisitor>;
   %template(vectorUINT16) std::vector<uint16_t >;
   %template(vectorUINT64) std::vector<uint64_t>;
   %template(vectorVectorUINT16) std::vector< std::vector <uint16_t > >;
   %template(vectorVectorUINT64) std::vector< std::vector <uint64_t > >;
   %template(vectorBool) std::vector<bool>;
   %template(vectorMinPosIDX) std::vector<MinPosIDX>;
   %template(vectorReadPosSize) std::vector< ReadPosSize >;
   %template(vectorReadMapping) std::vector<ReadMapping>;
   %template(vectorvectorReadMapping) std::vector<std::vector<ReadMapping>>;
   %template(vectorLongReadMapping) std::vector<LongReadMapping>;
   %template(vectorvectorLongReadMapping) std::vector<std::vector<LongReadMapping>>;
   %template(vectorTagNeighbour) std::vector<TagNeighbour>;
   %template(vectorvectorTagNeighbour) std::vector<std::vector<TagNeighbour>>;
   %template(vectorHaplotypeScore) std::vector<HaplotypeScore>;

   %ignore std::vector<LongReadMapper>::vector(size_type);
   %ignore std::vector<LongReadMapper>::resize;
   %template(vectorLongReadMapper) std::vector<LongReadMapper>;

   %ignore std::vector<LinkedReadMapper>::vector(size_type);
   %ignore std::vector<LinkedReadMapper>::resize;
   %template(vectorLinkedReadMapper) std::vector<LinkedReadMapper>;

   %ignore std::vector<PairedReadMapper>::vector(size_type);
   %ignore std::vector<PairedReadMapper>::resize;
   %template(vectorPairedReadMapper) std::vector<PairedReadMapper>;

   %ignore std::vector<PairedReadsDatastore>::vector(size_type);
   %ignore std::vector<PairedReadsDatastore>::resize;
   %template(vectorPairedReadsDatastore) std::vector<PairedReadsDatastore>;

   %ignore std::vector<LinkedReadsDatastore>::vector(size_type);
   %ignore std::vector<LinkedReadsDatastore>::resize;
   %template(vectorLinkedReadsDatastore) std::vector<LinkedReadsDatastore>;

   %ignore std::vector<LongReadsDatastore>::vector(size_type);
   %ignore std::vector<LongReadsDatastore>::resize;
   %template(vectorLongReadsDatastore) std::vector<LongReadsDatastore>;

   %ignore std::vector<PathsDatastore>::vector(size_type);
   %ignore std::vector<PathsDatastore>::resize;
   %template(vectorPathsDatastore) std::vector<PathsDatastore>;

   %template(SGNodePair) std::pair<sgNodeID_t, sgNodeID_t>;
   %template(vectorSGNodePair) std::vector<std::pair<sgNodeID_t, sgNodeID_t>>;

   %ignore std::vector<SequenceGraphPath>::vector(size_type);
   %ignore std::vector<SequenceGraphPath>::resize;

   %template(vectorPath) std::vector<SequenceGraphPath>;
   %template(vectorKmerCount) std::vector<KmerCount>;

   %template(intSGNodePair) std::pair<int, sgNodeID_t>;
   %template(vectorintSGNodePair) std::vector<std::pair<int, sgNodeID_t>>;

   %template(set10xTag) std::set<bsg10xTag>;
   %template(setSGNodePair) std::set<std::pair<sgNodeID_t, sgNodeID_t>>;
   %template(setSGNode) std::set<sgNodeID_t>;

   %template(usetUINT64) std::unordered_set<uint64_t>;
   %template(usetUINT128) std::unordered_set<__uint128_t, int128_hash>;

   %template(fastaReader) FastaReader<FastaRecord>;

#ifdef SWIGPYTHON
    %feature("python:tp_hash") Link "std::hash<Link>";

    %define __STR__()
    std::string __str__() {
      std::ostringstream out;
      out << *$self;
      return out.str().c_str();
    }
    %enddef

    %define __REPR__()
    std::string __repr__() {
      std::ostringstream out;
      out << "<" << *$self << ">";
      return out.str().c_str();
    }
    %enddef

    %extend Link{
        __STR__();
        __REPR__();
    }

    %extend Node{
        __STR__();
        __REPR__();
    }

    %extend LongReadMapping{
        __STR__();
        __REPR__();
    };

    %extend KmerIDX{
        __STR__();
        __REPR__();
    };

    %extend MinPosIDX{
        __STR__();
        __REPR__();
    };

    %extend nodeVisitor{
        __STR__();
        __REPR__();
    };

    %pythoncode %{
    __version__ = "@bsg_VERSION@"
    __branch__ = "@GIT_BRANCH@"
    __commit__ = "@GIT_COMMIT_HASH@"
    %}
#endif

%include "sglib/types/MappingTypes.hpp"
%include "sglib/graph/SequenceGraphPath.hpp"
%include "sglib/graph/SequenceSubGraph.hpp"
%include "sglib/graph/SequenceGraph.hpp"
%include "sglib/indexers/UniqueKmerIndex.hpp"
%include "sglib/processors/KmerCompressionIndex.hpp"
%include "sglib/workspace/WorkSpace.hpp"
%include "sglib/factories/KMerFactory.hpp"
%include "sglib/factories/KMerCountFactory.hpp"

%include "sglib/processors/Untangler.hpp"

%include "sglib/datastores/LongReadsDatastore.hpp"
%include "sglib/datastores/PairedReadsDatastore.hpp"
%include "sglib/datastores/PathsDatastore.hpp"
%include "sglib/mappers/LongReadMapper.hpp"
%include "sglib/mappers/LinkedReadMapper.hpp"
%include "sglib/mappers/PairedReadMapper.hpp"
%include "sglib/mappers/threader/NodeMapper.hpp"
%include "sglib/mappers/threader/MappingThreader.hpp"
%include "sglib/processors/LinkageUntangler.hpp"
%include "sglib/graph/LinkageDiGraph.hpp"

%include "sglib/processors/HaplotypeConsensus.hpp"
